@page "/patient"
@page "/patient/{PatientID}"

@using Blazorise;
@using SmICSCoreLib.Factories.PatientInformation.PatientData;
@using SmICSCoreLib.Factories.PatientMovementNew
@using SmICSCoreLib.Factories.MiBi.PatientView;
@using SmICSCoreLib.Factories.General;
@using SmICSWebApp.Data.PatientView;

@inject IPatientDataFactory _patientData;
@inject PatientViewService  _service;
<div style="margin-left: 2%; margin-right: 2%;">
    <Card Margin="Margin.Is5.Is3.FromBottom.Is3.FromTop" Padding="Padding.Is2.FromLeft">
        <CardBody Padding="Padding.Is2" Background="Background.Light" Class="box-style">
            <Fields Flex="Flex.AlignItems.Start">
                <Field Horizontal="true">
                    <FieldLabel ColumnSize="ColumnSize.Is2">PatientID</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit Placeholder="Bitte geben Sie eine valide Patientenbezeichnung ein..." @bind-text="@PatientID" Autofocus="false" />
                    </FieldBody>
                </Field>
                <Field Margin="Margin.Is4.FromLeft">
                    <Button Clicked="@Submit" id="btn"><Span class="oi oi-magnifying-glass" TextColor="TextColor.White"></Span></Button>
                </Field>
            </Fields>
        </CardBody>
    </Card>
</div>
<div class="span_hr">
    <span>&nbsp;</span>
</div>

<div style="margin-bottom:7.5em;">

    @if (Loading & !emptyResult)
    {
        <div class="spinner"></div>
    }

    else if (!Loading)
    {
        @if (emptyResult)
        { 
            <div>
                <span class="text-danger">Keine Einträge für den Patienten gefunden!</span>
            </div>
        }
        else if (patientResults is not null && !emptyResult)
        {
            @if (patient == null)
            {
                <Heading Size="HeadingSize.Is4" TextColor="TextColor.Black50" Margin="Margin.Is5.Is3.FromBottom.Is3.FromTop">Patient: @selectedPatient.PatientID</Heading>
            }
            else
            {
                <Heading Size="HeadingSize.Is4" TextColor="TextColor.Black50" Margin="Margin.Is5.Is3.FromBottom.Is3.FromTop">Patient: @patient.Name</Heading>
            }
            @foreach (KeyValuePair<Hospitalization, List<LabResult>> kvp in patientResults)
            {
                <HospitalizationCard Hospitalization="kvp" />
            }
        }
    }

</div>

@code {

    [CascadingParameter]
    public Error Error { get; set; }
    [Parameter]
    public string PatientID { get; set; }

    private Patient selectedPatient = new Patient();
    private PatientData patient;
    private SortedDictionary<Hospitalization, List<LabResult>> patientResults;
    private bool Collapsed { get; set; } = false;

    private bool Loading = false;
    private bool emptyResult = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PatientID))
        {
            await Submit();
        }
        await base.OnInitializedAsync();
    }

    private async Task Submit()
    {
        emptyResult = false;
        Loading = true;
        await Task.Delay(1);
        await Task.Run(GetData);
        Loading = false;
    }

    private async Task GetData()
    {
        selectedPatient.PatientID = PatientID;
        try
        {
            patientResults = await _service.GetData(selectedPatient);
            if (patientResults is null)
            {
                emptyResult = true;
            }
        }
        catch (Exception e)
        {
            Error.ProcessError(e);
        }
    }
}

