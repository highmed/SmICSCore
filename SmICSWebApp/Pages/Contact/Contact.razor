@page "/contact"
@page "/contact/{PatientID}/{Pathogen}/{Resistence}"

@using SmICSWebApp.Data.Contact;
@using SmICSCoreLib.DB.Models
@using SmICSWebApp.Data.Menu

@inject ContactService _contactService;
@inject MenuService _menuService;

@if (_pathogenMenuEntries is not null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="card">
                <div ="card-body">
                    <EditForm Model="@contact" OnValidSubmit="@Submit">
                        <label for="patID">PatientID:</label>
                        <input type="text" @bind="contact.PatientID" id="patID" />
                        <label for="pathogen">Erreger:</label>
                        <select id="pathogenDropdown" class="col-2 mr-2" @onchange="GetFilter">
                            <option value="" selected disabled hidden>Bitte wählen</option>
                            @foreach (PathogenEntry entry in _pathogenMenuEntries)
                            {
                                <option value="@string.Join(",", entry.Codes)">@entry.Name</option>
                            }
                        </select>
                        <label for="res">Resistenz:</label>
                        <select id="res" class="col-2 mr-2" @bind="contact.Resistence">
                            <option value="" selected disabled hidden>Bitte wählen</option>
                            <option value="keine">keine</option>
                            @if (_filterMRE is not null)
                            {
                                @foreach (string filter in _filterMRE)
                                {
                                    <option value="@filter">@filter</option>
                                }
                            }
                        </select>
                        <button type="submit" class="btn btn-outline-primary"><i class="oi oi-magnifying-glass"></i></button>
                    </EditForm>
                </div>
            </div>
        </div>
        @if (Loading && !EmptyResult)
        {
            <div class="spinner"></div>
        }
        else if (!Loading && EmptyResult)
        {
            <div>
                <span class="text-danger">Es wurden keine Daten zu den gewählten Parametern gefunden.</span>
            </div>
        }
        else if (root is not null && !Loading && !EmptyResult)
        {
            <div class="row">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-2">
                                @if (root.CurrentHospitalization != root.Hospitalizations.First())
                                {
                                    <button type="button" class="btn btn-outline-light text-black" @onclick="GetPrevious"><i class="oi oi-chevron-left"></i> Vorheriger Fall</button>
                                }
                            </div>
                            <div class="col-8">
                                @if (FirstInfection.HasValue && FirstInfection.Value > root.CurrentHospitalization.Admission.Date)
                                {
                                    <h2 class="text-center text-danger">@contact.PatientID</h2>
                                }
                                else if (FirstInfection.HasValue && FirstInfection.Value <= root.CurrentHospitalization.Admission.Date)
                                {
                                    <h2 class="text-center text-primary">@contact.PatientID</h2>
                                }
                                else
                                {
                                    <h2 class="text-center">@contact.PatientID</h2>
                                }
                                <h4 class="text-center">Fall: @root.CurrentHospitalization.CaseID</h4>
                                <h4 class="text-center">Zeitraum: @root.CurrentHospitalization.Admission.Date.ToString("yyyy-MM-dd") - @(root.CurrentHospitalization.Discharge.Date.HasValue ? (root.CurrentHospitalization.Discharge.Date.Value.ToString("yyyy-MM-dd")) : null)</h4>
                                @if (FirstInfection.HasValue)
                                {
                                    <h4 class="text-center ">Bekannt seit: @FirstInfection.Value.ToString("yyyy-MM-dd")</h4>
                                }
                                else
                                {
                                    <h4 class="text-center">Bekannt seit: <i>kein positiver Nachweis</i></h4>
                                }
                            </div>
                            <div class="col-2">
                                @if (root.CurrentHospitalization != root.Hospitalizations.Last())
                                {
                                    <button type="button" class="btn btn-outline-light text-black" @onclick="GetNext"><i class="oi oi-chevron-right"></i> Nächster Fall </button>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body bottom-border">
                        <div class="row">
                            <div class="col-2">
                                <div id="mySidepanel" class="sidepanel @(Collapsed ? "open" : "close")">
                                    <button type="button" class="btn btn-sm btn-outline-primary text-blue btn-top-right" hidden="@(!Collapsed)" @onclick="@(() => Collapsed = !Collapsed)">
                                        <i class="oi oi-arrow-left"></i>
                                    </button>
                                    <EditForm Model="_filterParameter" OnSubmit="Filter">
                                        <div>
                                            <label class="fw-bold mb-1" for="resistanceFilter">Erreger:</label><br />
                                            <InputRadioGroup @bind-Value="_filterParameter.ResistenceDetail" id="resistanceFilter">
                                                @foreach (string opt in _filterParameter.ResistanceOptions)
                                                        {
                                                    <div class="col">
                                                        <InputRadio Value="opt" />@opt
                                                    </div>
                                                        }
                                            </InputRadioGroup>
                                        </div>
                                        <div class="mt-3">
                                            <label for="contactFilter" class="fw-bold mb-1">Kontaktebene:</label><br />
                                            <InputRadioGroup @bind-Value="_filterParameter.ContactDetail" id="contactFilter">
                                                @foreach (string opt in _filterParameter.ContactOptions)
                                                        {
                                                    <div class="col">
                                                        <InputRadio Value="opt" />@opt
                                                    </div>
                                                        }
                                            </InputRadioGroup>
                                        </div>
                                        <div class="mt-3">
                                            <label for="contactFilter" class="fw-bold mb-1">Zeitraum:</label><br />
                                            <label class="mr-1">Min</label>
                                            <InputDate @bind-Value="_filterParameter.StartDate" />
                                            <br />
                                            <label class="mr-1 mt-1">Max</label>
                                            <InputDate @bind-Value="_filterParameter.EndDate" />
                                        </div>
                                        <button class="btn btn-outline-primary text-right text-blue btn-bottom-right" type="submit" hidden="@(!Collapsed)" @onclick="@(() => Collapsed = !Collapsed)">Filter</button>
                                        <button class="btn btn-outline-primary text-right text-blue btn-bottom-left" type="submit" hidden="@(!Collapsed)" @onclick="ResetFilter">Zurücksetzen</button>
                                    </EditForm>
                                </div>
                                <button class="btn btn-outline-primary text-blue" @onclick="@(() => Collapsed = !Collapsed)"><i class="fa fa-filter"></i></button>
                            </div>
                            <div class="col-8">
                                <ContactTable Contacts="contactDetails" />
                            </div>
                            <div class="col-2">
                                <div>
                                    <canvas width="20px" height="10px" style="border:1px solid #000000; background-color: red">
                                    </canvas>
                                    Nosokomial
                                </div>
                                <div>
                                    <canvas width="20px" height="10px" style="border:1px solid #000000;background-color: blue">
                                    </canvas>
                                    Bekannt
                                </div>
                                <div>
                                    <svg class="p-0" width="30px" height="30px">
                                        <circle cx="15" cy="15" r="10" stroke="black" stroke-width="0.5" fill="#006400" />
                                    </svg>
                                    Im Krankenhaus nach Erstnachweis des Indexpatienten
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public ContactParameter contact { get; set; } = new ContactParameter();

    private List<Data.Contact.Contact> contacts;
    private List<Data.Contact.ContactDetails> contactDetails;

    [Parameter]
    public string PatientID { get; set; }

    [Parameter]
    public string Pathogen { get; set; }

    [Parameter]
    public string Resistence { get; set; }

    private ContactRoot root = null;
    private bool Loading = false;
    private bool EmptyResult = false;

    private List<string> _filterMRE;

    private List<PathogenEntry> _pathogenMenuEntries;

    private bool Collapsed = false;
    private FilterParameter _filterParameter;

    private DateTime? FirstInfection = null;

    private void GetData()
    {
        _filterParameter = new FilterParameter();
        _filterParameter.ContactDetail = _filterParameter.ContactOptions[0];
        _filterParameter.ResistenceDetail = _filterParameter.ResistanceOptions[0];
        _filterParameter.ResistanceOptions.Add(_pathogenMenuEntries.Where(p => p.Codes[0] == contact.PathogenCodes[0]).Select(p => p.Name).First());
        _filterParameter.ResistanceOptions.Add(contact.Resistence);
        root = _contactService.LoadContactData(contact);
        if (root is null)
        {
            EmptyResult = true;
            Console.WriteLine("Keine Daten für das Kontaktnetzwerk gefunden!");
        }
        else
        {
            DetermineRootFirstInfection();
            contacts = root.Contacts[root.CurrentHospitalization];
            contactDetails = GetContactDetails(contacts);
        }
    }

    private async Task Submit()
    {
        EmptyResult = false;
        Loading = true;
        await Task.Run(GetData);
        Loading = false;
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.TryGetValue("PatientID", out string ID);
        parameters.TryGetValue("Pathogen", out string patho);
        parameters.TryGetValue("Resistence", out string res);
        base.SetParametersAsync(parameters);

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PatientID))
        {
            contact.PatientID = PatientID;
            contact.Pathogen = Pathogen;
            contact.Resistence = Resistence;

            Loading = true;
            await Task.Run(LoadMenu);
            await Submit();
            Loading = false;

        }
        await base.OnInitializedAsync();
        Loading = true;
        await Task.Run(LoadMenu);
        Loading = false;
    }

    private void LoadMenu()
    {
        _pathogenMenuEntries = _menuService.GetPathogens();
        _pathogenMenuEntries = _pathogenMenuEntries.OrderBy(p => p.Name).ToList();
    }

    private void GetPrevious()
    {
        ResetFilter();
        _contactService.GetPreviousHospitalizationContacts(ref root, contact);
        contacts = root.Contacts[root.CurrentHospitalization];
        contactDetails = GetContactDetails(contacts);
    }

    private void GetNext()
    {
        ResetFilter();
        int index = root.Hospitalizations.IndexOf(root.CurrentHospitalization);
        root.CurrentHospitalization = root.Hospitalizations[index + 1];
        contacts = root.Contacts[root.CurrentHospitalization];
        contactDetails = GetContactDetails(contacts);
    }

    private void GetFilter(ChangeEventArgs e)
    {
        contact.PathogenCodes = e.Value.ToString().Split(",").ToList();
        if (contact.PathogenCodes is not null)
        {
            _filterMRE = _contactService.GetFilter(contact.PathogenCodes);
        }
    }

    private void Filter()
    {
        contacts = root.Contacts[root.CurrentHospitalization];
        int res = _filterParameter.ResistanceOptions.IndexOf(_filterParameter.ResistenceDetail);
        int con = _filterParameter.ContactOptions.IndexOf(_filterParameter.ContactDetail);
        switch (res)
        {
            case 0:
                break;
            case 1:
                contacts = contacts.Where(c => c.InfectionStatus is not null && c.InfectionStatus.Infected).ToList();
                break;
            case 2:
                contacts = contacts.Where(c => c.InfectionStatus is not null && (c.InfectionStatus.Nosocomial || c.InfectionStatus.Known)).ToList();
                break;
        }
        switch (con)
        {
            case 0:
                break;
            case 1:
                contacts = contacts.Where(c => c.WardContact).ToList();
                break;
            case 2:
                contacts = contacts.Where(c => c.RoomContact).ToList();
                break;
        }
        if (_filterParameter.StartDate.HasValue)
        {
            contacts = contacts.Where(c => _filterParameter.StartDate.Value.Date <= c.ContactStart.Date || (c.ContactEnd.HasValue && _filterParameter.StartDate.Value.Date <= c.ContactEnd.Value.Date)).ToList();
        }
        if (_filterParameter.EndDate.HasValue)
        {
            contacts = contacts.Where(c => (c.ContactEnd.HasValue && _filterParameter.EndDate.Value.Date >= c.ContactEnd.Value.Date) || (_filterParameter.EndDate.Value.Date >= c.ContactStart.Date)).ToList();
        }
        contactDetails = GetContactDetails(contacts);
    }

    private void ResetFilter()
    {
        _filterParameter.ContactDetail = _filterParameter.ContactOptions[0];
        _filterParameter.ResistenceDetail = _filterParameter.ResistanceOptions[0];
        _filterParameter.StartDate = null;
        _filterParameter.EndDate = null;
    }

    private void DetermineRootFirstInfection()
    {
        DateTime? tmpFirstKnownAppearance = null;
        if (root.InfectionStatus.Count > 0)
        {
            for (int i = root.Hospitalizations.Count - 1; i >= 0; i--)
            {
                if (root.InfectionStatus.ContainsKey(root.Hospitalizations[i]))
                {
                    if (root.InfectionStatus[root.Hospitalizations[i]].Resistance == contact.Resistence)
                    {
                        if (root.InfectionStatus[root.Hospitalizations[i]].Nosocomial)
                        {
                            FirstInfection = root.InfectionStatus[root.Hospitalizations[i]].NosocomialDate;
                            return;
                        }
                        else if (root.InfectionStatus[root.Hospitalizations[i]].Known)
                        {
                            tmpFirstKnownAppearance = root.Hospitalizations[i].Admission.Date;
                        }
                    }
                }
            }
            if (!FirstInfection.HasValue && tmpFirstKnownAppearance.HasValue)
            {
                FirstInfection = tmpFirstKnownAppearance;
            }
        }
    }

    private List<ContactDetails> GetContactDetails(List<Data.Contact.Contact> contacts)
    {
        if (contacts is null)
        {
            return null;
        }
        List<ContactDetails> details = new List<ContactDetails>();
        foreach (Data.Contact.Contact contact in contacts)
        {
            ContactDetails detail = new ContactDetails();
            detail.PatientID = contact.PatientID;
            if (contact.InfectionStatus is not null)
            {
                if (contact.InfectionStatus.Nosocomial)
                {
                    detail.IsNosocomial = true;
                    detail.IsKnown = false;
                }
                else if (contact.InfectionStatus.Known)
                {
                    detail.IsNosocomial = false;
                    detail.IsKnown = true;
                }
                if (contact.InfectionStatus.Nosocomial)
                {
                    detail.StatusDate = contact.InfectionStatus.NosocomialDate.Value.ToString("yyy-MM-dd");
                }
                else if (contact.InfectionStatus.Known)
                {
                    detail.StatusDate = contact.StatusDate.Value.ToString("yyy-MM-dd");
                }
            }
            else
            {
                detail.IsNosocomial = false;
                detail.IsKnown = false;
                detail.StatusDate = "";
            }

            detail.Room = contact.RoomContact ? contact.PatientLocation.Room : "";
            detail.Ward = contact.WardContact ? contact.PatientLocation.Ward : "";
            detail.Departement = contact.DepartementContact ? contact.PatientLocation.Departement : "";
            detail.ContactStart = contact.ContactStart.ToString("yyy-MM-dd");
            detail.ContactEnd = contact.ContactEnd.HasValue ? contact.ContactEnd.Value.ToString("yyyy-MM-dd") : "";
            if (!contact.Hospitalization.Discharge.Date.HasValue)
            {
                detail.IsPresent = true;
            }
            else if (contact.Hospitalization.Discharge.Date.HasValue && FirstInfection.HasValue && contact.Hospitalization.Discharge.Date.Value > FirstInfection.Value)
            {
                detail.IsPresent = true;
            }

            if (!details.Contains(detail))
            {
                details.Add(detail);
            }
        }
        return details;
    }
}
