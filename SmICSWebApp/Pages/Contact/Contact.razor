@page "/contact"
@page "/contact/{PatientID}/{Pathogen}/{Resistence}"

@using Blazorise;
@using SmICSWebApp.Data.Contact
@using SmICSCoreLib.Factories.General

@inject ContactService _contactService

<div class="container-fluid">
    <div class="row">
        <div class="card">
            <div ="card-body">
                <EditForm Model="@contact" OnValidSubmit="@Submit">
                    <label for="patID">PatientID:</label>
                    <input type="text" @bind="contact.PatientID" id="patID" />
                    <label for="pathogen">Pathogen:</label>
                    <input type="text" id="pathogen" list="pathogenList" @onchange="GetFilter" />
                    <datalist id="pathogenList">
                        <option>Staphylococcus aureus</option>

                    </datalist>
                    <label for="res">Resistenz:</label>
                    <input type="text" id="res" list="resistanceList" @bind="contact.Resistence" />
                    <datalist id="resistanceList">
                        @if (_filterMRE is not null)
                        {
                            @foreach (string filter in _filterMRE)
                            {
                                <option value="@filter">@filter</option>
                            }
                        }
                    </datalist>
                    <button type="submit" class="btn btn-outline-primary"><i class="oi oi-magnifying-glass"></i></button>
                </EditForm>
            </div>
        </div>
    </div>
    @if (Loading)
    {
        <div class="spinner"></div>
    }
    else if (root != null && !Loading)
    {
        <div class="row">
            <div class="card">
                <div class="card-header">
                    <div class="row">
                            <div class="col-2">
                                @if (root.CurrentHospitalization != root.Hospitalizations.First())
                                { 
                                    <button type="button" class="btn btn-outline-light text-black" @onclick="GetPrevious"><i class="oi oi-chevron-left"></i> Vorheriger Fall</button>
                                }
                            </div>
                        <div class="col-8">
                            <h2 class="text-center">@contact.PatientID</h2>
                            <h4 class="text-center">Fall: @root.CurrentHospitalization.CaseID</h4>
                            <h4 class="text-center">Zeitraum: @root.CurrentHospitalization.Admission.Date.ToString("yyyy-MM-dd") - @(root.CurrentHospitalization.Discharge.Date.HasValue ? (root.CurrentHospitalization.Discharge.Date.Value.ToString("yyyy-MM-dd")) : null)</h4>
                        </div>
                        <div class="col-2">
                            @if (root.CurrentHospitalization != root.Hospitalizations.Last())
                            {
                                <button type="button" class="btn btn-outline-light text-black" @onclick="GetNext"><i class="oi oi-chevron-right"></i> Nächster Fall </button>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-2">
                            <div id="mySidepanel" class="sidepanel @(Collapsed ? "open" : "close")">
                                    <button type="button" class="btn btn-sm btn-outline-primary text-blue btn-top-right" hidden="@(!Collapsed)" @onclick="@(()=>Collapsed = !Collapsed)">
                                        <i class="oi oi-arrow-left"></i>
                                    </button>
                                <EditForm Model="_filterParameter" OnSubmit="Filter">
                                    <div>
                                        <label class="fw-bold mb-1" for="resistanceFilter">Erreger:</label><br />
                                        <InputRadioGroup @bind-Value="_filterParameter.ResistenceDetail" id="resistanceFilter">
                                            @foreach (string opt in _filterParameter.ResistanceOptions)
                                                {
                                                <div class="col">
                                                    <InputRadio Value="opt" />@opt
                                                </div>
                                                }
                                        </InputRadioGroup>
                                    </div>
                                    <div class="mt-3">
                                        <label for="contactFilter" class="fw-bold mb-1">Kontaktebene:</label><br />
                                        <InputRadioGroup @bind-Value="_filterParameter.ContactDetail" id="contactFilter">
                                            @foreach (string opt in _filterParameter.ContactOptions)
                                                {
                                                <div class="col">
                                                    <InputRadio Value="opt" />@opt
                                                </div>
                                                }
                                        </InputRadioGroup>
                                    </div>
                                    <div class="mt-3">
                                        <label for="contactFilter" class="fw-bold mb-1">Zeitraum:</label><br />
                                        <label class="mr-1">Min</label>
                                        <InputDate @bind-Value="_filterParameter.StartDate" />
                                        <br />
                                        <label class="mr-1 mt-1">Max</label>
                                        <InputDate @bind-Value="_filterParameter.EndDate" />
                                    </div>
                                    <button class="btn btn-outline-primary text-right text-blue btn-bottom-right" type="submit" hidden="@(!Collapsed)" @onclick="@(()=>Collapsed = !Collapsed)">Filter</button>
                                    <button class="btn btn-outline-primary text-right text-blue btn-bottom-left" type="submit" hidden="@(!Collapsed)" @onclick="ResetFilter">Zurücksetzten</button>
                                </EditForm>
                            </div>
                            <button class="btn btn-outline-primary text-blue" @onclick="@(()=>Collapsed = !Collapsed)"><i class="fa fa-filter"></i></button>
                        </div>
                        <div class="col-8">
                            <ContactTable Contacts="contacts" />
                        </div>
                        <div class="col-2"></div>
                    </div>
                </div>
            </div>
        </div>

    }
</div>

@code {
    [Parameter]
    public ContactParameter contact { get; set; } = new ContactParameter();
    private List<Data.Contact.Contact> contacts;

    [Parameter]
    public string PatientID { get; set; }

    [Parameter]
    public string Pathogen { get; set; }

    [Parameter]
    public string Resistence { get; set; }

    private ContactRoot root = null;
    private bool Loading = false;

    private List<string> _filterMRE;


    private bool Collapsed = false;
    private FilterParameter _filterParameter;
    private void Submit()
    {
        _filterParameter = new FilterParameter();
        _filterParameter.ContactDetail = _filterParameter.ContactOptions[0];
        _filterParameter.ResistenceDetail = _filterParameter.ResistanceOptions[0];
        _filterParameter.ResistanceOptions.Add(contact.Pathogen);
        _filterParameter.ResistanceOptions.Add(contact.Resistence);
        root = _contactService.LoadContactData(contact);
        contacts = root.Contacts[root.CurrentHospitalization];
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.TryGetValue("PatientID", out string ID);
        parameters.TryGetValue("Pathogen", out string patho);
        parameters.TryGetValue("Resistence", out string res);
        base.SetParametersAsync(parameters);

        return null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(PatientID))
        {
            contact.PatientID = PatientID;
            contact.Pathogen = Pathogen;
            contact.Resistence = Resistence;

            Loading = true;
            await Task.Run(Submit);
            Loading = false;

        }
        await base.OnInitializedAsync(); ;
    }

    private void GetPrevious()
    {
        _contactService.GetPreviousHospitalizationContacts(ref root, contact);
    }

    private void GetNext()
    {
        int index = root.Hospitalizations.IndexOf(root.CurrentHospitalization);
        root.CurrentHospitalization = root.Hospitalizations[index + 1];
    }

    private void GetFilter(ChangeEventArgs e)
    {
        contact.Pathogen = e.Value.ToString();
        if (!string.IsNullOrEmpty(contact.Pathogen))
        {
            _filterMRE = _contactService.GetFilter(contact.Pathogen);
        }
    }

    private void Filter()
    {
        contacts = root.Contacts[root.CurrentHospitalization];
        int res = _filterParameter.ResistanceOptions.IndexOf(_filterParameter.ResistenceDetail);
        int con = _filterParameter.ContactOptions.IndexOf(_filterParameter.ContactDetail);
        switch (res)
        {
            case 1:
                break;
            case 2:
                contacts = contacts.Where(c => c.InfectionStatus.Infected).ToList();
                break;
            case 3:
                contacts = contacts.Where(c => (c.InfectionStatus.Nosocomial || c.InfectionStatus.Known) && !c.InfectionStatus.Healed).ToList();
                break;
        }
        switch (con)
        {
            case 1:
                break;
            case 2:
                contacts = contacts.Where(c => c.WardContact).ToList();
                break;
            case 3:
                contacts = contacts.Where(c => c.RoomContact).ToList();
                break;
        }
        if(_filterParameter.StartDate.HasValue)
        {
            contacts = contacts.Where(c => _filterParameter.StartDate.Value.Date <= c.ContactStart.Date || (c.ContactEnd.HasValue && _filterParameter.StartDate.Value.Date <= c.ContactEnd.Value.Date )).ToList();
        }
        if(_filterParameter.EndDate.HasValue)
        {
            contacts = contacts.Where(c => (c.ContactEnd.HasValue && _filterParameter.EndDate.Value.Date >= c.ContactEnd.Value.Date) || (_filterParameter.EndDate.Value.Date >= c.ContactStart.Date)).ToList();
        }
    }

    private void ResetFilter()
    {
        _filterParameter.ContactDetail = _filterParameter.ContactOptions[0];
        _filterParameter.ResistenceDetail = _filterParameter.ResistanceOptions[0];
        _filterParameter.StartDate = null;
        _filterParameter.EndDate = null;
    }

}
