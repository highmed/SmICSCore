@page "/district/{lb}"

@using System.Collections;
@using SmICSCoreLib.StatistikDataModels
@using SmICSCoreLib.StatistikServices
@using Microsoft.Extensions.Logging
@using SmICSCoreLib.Database
@inject ILogger<District> Logger
@inject RkiService rkiService
@inject IJSRuntime JS

<div class="card">
    <div class="row">
        <StatistikNav>
        </StatistikNav>

        <div class="card-body col-10">
            <div style="padding: 0px 0px 100px 0px;">
                @if (status == false)
                {
                    @if (standAktuell == false)
                    {
                        <p><em>Es stehen momentan leider keine Daten zu Verfügung!</em></p>
                        <p><em>Versuchen Sie bitte später diese Seite aufzurufen!</em></p>
                    }
                    else
                    {
                        <p><em>Daten werden geladen...</em></p>
                        <div class="spinner"></div>
                    }
                }
                else
                {
                    if (standAktuell == false)
                    {
                        <div class="row" style=" display: inline-block; margin-left: 16px;">
                            <div class="row">
                                <p><em>weitere Daten stehen derzeit nicht verfügung!</em></p>
                            </div>
                            <div class="row">
                                <button class="btn btn-primary" @onclick="GetLastReport"> Daten von Vortag laden </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-6">
                                <div class="row">
                                    <div class="col-md-3 col-xxl-3 d-flex">
                                        <div class="card flex-fill">
                                            <div class="card-header" id="head-info">
                                                <h6 class="card-title"> COVID-19-Fälle </h6>
                                            </div>
                                            <div class="card-body" id="body-info">
                                                <span class="h5 d-inline-block mt-1 mb-3">@fallzahl</span>
                                                <p class="mb-2">+ @fallzahlVortag</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-xxl-3 d-flex">
                                        <div class="card flex-fill">
                                            <div class="card-header" id="head-info">
                                                <h6 class="card-title"> COVID-19-Todesfälle </h6>
                                            </div>
                                            <div class="card-body" id="body-info">
                                                <span class="h5 d-inline-block mt-1 mb-3">@todesfaelle</span>
                                                <p class="mb-2">+ @todesfaelleVortag</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-xxl-3 d-flex">
                                        <div class="card flex-fill">
                                            <div class="card-header" id="head-info" style="background-color: @inzidenzColor">
                                                <h6 class="card-title">  7-Tage-Inzidenz  </h6>
                                            </div>
                                            <div class="card-body" id="body-info">
                                                <span class="h5 d-inline-block mt-1 mb-3">@inzidenz7Tage</span>
                                                <p class="mb-2"> @inzidenz7TageVortag</p>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3 col-xxl-3 d-flex">
                                        <div class="card flex-fill">
                                            <div class="card-header" id="head-info" style="background-color: @rWertColor">
                                                <h6 class="card-title">  7-Tage-R-Wert </h6>
                                            </div>
                                            <div class="card-body" id="body-info">
                                                <span class="h5 d-inline-block mt-1 mb-3">@rWert7Tage</span>
                                                <p class="mb-2">@rWert7TageVortag</p>

                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">

                                </div>
                            </div>

                            <div class="col-6">

                            </div>
                        </div>
                        <br>

                        <div class="row">
                            <div class="col-10 d-flex">
                                <div class="card flex-fill">
                                    <div class="card-header">
                                        <div class="row">
                                            <div class="col-8">
                                                <h6 class="card-title"> Landkreise @lb </h6>
                                            </div>
                                            <div class="col-4">
                                                <ul class="pagination" style="justify-content: flex-end;">
                                                    <li class="paginate_button page-item next">
                                                        <a href="/state" class="page-link"> Zurück zur Hauptansicht</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="card-body">
                                        <p>Datenstand @stand</p>
                                        <div class="tableFixHead">
                                            <table class="table table-bordered table-hover mb-0">
                                                <thead>
                                                    <tr>
                                                        <th scope="col">Landkreis</th>
                                                        <th scope="col">Stadt</th>
                                                        <th scope="col">Gesamt Fälle</th>
                                                        <th scope="col">Fälle letzte 7 Tage</th>
                                                        <th scope="col">Fälle pro 100000 EW</th>
                                                        <th scope="col">7-Tage-Inzi­denz</th>
                                                        <th scope="col">Gesamt Todes­fälle</th>
                                                        <th scope="col">Todesfälle letzte 7 Tage</th>
                                                    </tr>
                                                </thead>
                                                <tbody>

                                                    @foreach (var district in lkList)
                                                    {
                                                        <tr>
                                                            <td scope="row">@district.LandkreisName</td>
                                                            <td>@district.Stadt</td>
                                                            <td>@district.FallzahlGesamt</td>
                                                            <td>@district.Faelle7Lk</td>
                                                            <td>@district.FaellePro100000Ew</td>
                                                            <td>@district.Inzidenz7Tage</td>
                                                            <td>@district.Todesfaelle</td>
                                                            <td>@district.Todesfaelle7Lk</td>
                                                        </tr>
                                                    }

                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <br>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime datum = DateTime.Now;
    private bool standAktuell, status;
    private string rWert7Tage;
    private string rWert7TageVortag;
    private string inzidenz7Tage;
    private string inzidenz7TageVortag;
    private string stand;
    private string fallzahl;
    private int fallzahlVortag;
    private string todesfaelle;
    private int todesfaelleVortag;
    private string inzidenzColor;
    private string rWertColor;

    private DBService dbService;
    private BundeslandNew bundeslandNew;
    private BundeslandNew lastBundeslandNew;
    private BerichtNew bericht;
    private List<LandkreisNew> lkList;

    [Parameter]
    public string lb { get; set; }


    protected override async Task OnInitializedAsync()
    {
        dbService = new();
        status = false;
        standAktuell = true;

        await Task.Run(GetRKIData);

        if (status == false && standAktuell == true)
        {
            Logger.LogWarning("RKI-Daten stehen nicht zur Verfügung!");
            status = false;
            standAktuell = false;
        }
    }

    private void SetRKIData()
    {
        try
        {
            LandkreisNew[] landkreise = rkiService.GetLandkreise();
            if (landkreise != null)
            {
                foreach (var lk in landkreise)
                {
                    dbService.Insert<LandkreisNew>(lk);
                }
            }
        }
        catch (Exception)
        {
            Logger.LogWarning("DailyReport koennte nicht hochgeladen werden!");
            status = true;
            standAktuell = false;
        }
    }

    private void GetRKIData()
    {
        try
        {
            string valueBundeslandNew = lb + "-" + datum.ToString("dd.MM.yyyy");
            bundeslandNew = dbService.FindOneByAttributes<BundeslandNew>("id", valueBundeslandNew, "bundesland", lb);
            stand = bundeslandNew.Stand;
            fallzahl = bundeslandNew.FallzahlGesamt;
            todesfaelle = bundeslandNew.Todesfaelle;
            inzidenz7Tage = bundeslandNew.Inzidenz7Tage;

            string valueBericht = "Bericht-" + datum.ToString("dd.MM.yyyy");
            bericht = dbService.FindOneByAttribute<BerichtNew>("id", valueBericht);
            rWert7Tage = bericht.RWert7Tage;
            rWert7TageVortag = bericht.RWert7TageVortag;
            standAktuell = bericht.StandAktuell;

            string lastDayValue = lb + "-" + datum.AddDays(-1).ToString("dd.MM.yyyy");
            lastBundeslandNew = dbService.FindOneByAttributes<BundeslandNew>("id", lastDayValue, "bundesland", lb);

            string vortag = lastBundeslandNew.FallzahlGesamt;
            fallzahlVortag = Int32.Parse(fallzahl.Replace(".", "").Trim()) - Int32.Parse(vortag.Replace(".", "").Trim());
            string vortag2 = lastBundeslandNew.Todesfaelle;
            todesfaelleVortag = Int32.Parse(todesfaelle.Replace(".", "").Trim()) - Int32.Parse(vortag2.Replace(".", "").Trim());
            inzidenz7TageVortag = lastBundeslandNew.Inzidenz7Tage;

            string valueLk = datum.ToString("dd.MM.yyyy");
            IEnumerable<LandkreisNew> lks = dbService.FindAllByAttributes<LandkreisNew>("Stand", valueLk, "bundesland", lb);
            lkList = lks.ToList();
            if (lks != null && lkList.Count != 0)
            {
                List<LandkreisNew> lkList = lks.ToList();
            }
            else
            {
                SetRKIData();
            }

            inzidenzColor = rkiService.SetCaseColor(inzidenz7Tage, inzidenz7TageVortag);
            rWertColor = rkiService.SetCaseColor(rWert7Tage, rWert7TageVortag);
            Logger.LogInformation("DailyReport wurde erfolgreich heruntergeladen");
            status = true;
        }
        catch (Exception)
        {
            Logger.LogWarning("DailyReport koennte nicht heruntergeladen werden!");
            status = true;
            standAktuell = false;
        }
    }

    private void GetLastReport()
    {
        try
        {
            string valueBundeslandNew = lb + "-" + datum.AddDays(-1).ToString("dd.MM.yyyy");
            bundeslandNew = dbService.FindOneByAttributes<BundeslandNew>("id", valueBundeslandNew, "bundesland", lb);
            fallzahl = bundeslandNew.FallzahlGesamt;
            todesfaelle = bundeslandNew.Todesfaelle;
            inzidenz7Tage = bundeslandNew.Inzidenz7Tage;

            string valueBericht = "Bericht-" + datum.AddDays(-1).ToString("dd.MM.yyyy");
            bericht = dbService.FindOneByAttribute<BerichtNew>("id", valueBericht);
            rWert7Tage = bericht.RWert7Tage;
            rWert7TageVortag = bericht.RWert7TageVortag;
            standAktuell = bericht.StandAktuell;

            string lastDayValue = lb + "-" + datum.AddDays(-2).ToString("dd.MM.yyyy");
            lastBundeslandNew = dbService.FindOneByAttributes<BundeslandNew>("id", lastDayValue, "bundesland", lb);

            string vortag = lastBundeslandNew.FallzahlGesamt;
            fallzahlVortag = Int32.Parse(fallzahl.Replace(".", "").Trim()) - Int32.Parse(vortag.Replace(".", "").Trim());
            string vortag2 = lastBundeslandNew.Todesfaelle;
            todesfaelleVortag = Int32.Parse(todesfaelle.Replace(".", "").Trim()) - Int32.Parse(vortag2.Replace(".", "").Trim());
            inzidenz7TageVortag = lastBundeslandNew.Inzidenz7Tage;

            Logger.LogInformation("LastDailyReport wurde erfolgreich heruntergeladen");
            status = true;

        }
        catch (Exception)
        {
            Logger.LogWarning("LastDailyReport koennte nicht heruntergeladen werden!");
            status = false;
            standAktuell = false;
        }
    }

}

