@page "/region"

@using SmICSCoreLib.StatistikDataModels
@using SmICSCoreLib.StatistikServices
@using System.ComponentModel.DataAnnotations
@using System
@using System.IO;
@using ChartJs.Blazor.LineChart
@using SmICSCoreLib.JSONFileStream;
@using Microsoft.Extensions.Logging
@using SmICSCoreLib.Database
@inject ILogger<Region> Logger
@inject RkiService rkiService


<div class="card">
    <div class="row">
        <StatistikNav>
        </StatistikNav>

        <div class="card-body col-10">
            <div style="padding: 0px 0px 100px 0px;">
                @if (lkList == null)
                {
                    @if (status == false)
                    {
                        <p><em>Es stehen momentan leider keine Daten zu Verfügung!</em></p>
                        <p><em>Versuchen Sie bitte später diese Seite aufzurufen!</em></p>
                    }
                    else
                    {
                        <p><em>Daten werden geladen...</em></p>
                        <div class="spinner"></div>
                    }
                }
                else
                {
                    <div class="row">
                        <div class="col-5">
                            <div class="card flex-fill">
                                <div class="card-header" style="padding-top: 10px;">
                                    <h5 class="card-title">Vergleich Region-Bundesland</h5>
                                    <EditForm Model="@data">
                                        <div style="display: inline-flex; ">
                                            <div>
                                                <label>Bundesland: </label>
                                                <InputSelect @bind-Value="data.bl" @onclick="@GetBl">
                                                    @foreach (var item in blList)
                                                        {
                                                        <option value="@item.Bundesland"> @item.Bundesland</option>}
                                                    }
                                                </InputSelect>
                                            </div>

                                            <div>
                                                <label>Region: </label>
                                                <InputSelect @bind-Value="data.gen" @onclick="@GetLk">
                                                    @foreach (var item in lkList)
                                                        {
                                                        <option value="@item.Stadt">
                                                            @item.Stadt
                                                        </option>
                                                        }
                                                </InputSelect>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                                <div class="card-body">
                                    <p> Stand @stand</p>
                                    <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                        <table class="table table-bordered table-hover mb-0">
                                            <thead style="background-color: #7FBDD2;">
                                                <tr>
                                                    <th scope="col">Daten</th>
                                                    <th scope="col">@landkreisNew.Stadt</th>
                                                    <th scope="col">@bundeslandNew.Bundesland</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <th scope="row">Fallzahl</th>
                                                    <td>@landkreisNew.FallzahlGesamt</td>
                                                    <td>@bundeslandNew.FallzahlGesamt</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Fallzahl pro 100.000 Einwohner</th>
                                                    <td>@landkreisNew.FaellePro100000Ew </td>
                                                    <td>@bundeslandNew.FaellePro100000Ew</td>
                                                </tr>

                                                <tr>
                                                    <th scope="row">Fälle in den letzten 7 Tagen</th>
                                                    <td>@landkreisNew.Faelle7Lk</td>
                                                    <td>@bundeslandNew.Faelle7BL</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">7-Tage-Inzidenz</th>
                                                    <td>@landkreisNew.Inzidenz7Tage</td>
                                                    <td>@bundeslandNew.Inzidenz7Tage</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">7-Tage-R-Wert</th>
                                                    <td> @rValue</td>
                                                    <td> @rValue</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Verstorben</th>
                                                    <td>@landkreisNew.Todesfaelle</td>
                                                    <td>@bundeslandNew.Todesfaelle</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Verstorben in den letzten 7 Tagen</th>
                                                    <td>@landkreisNew.Todesfaelle7Lk</td>
                                                    <td>@bundeslandNew.Todesfaelle7BL</td>
                                                </tr>
                                                @*<tr>
                                                    <th scope="row">Genesen</th>
                                                    <td> k.A.</td>
                                                    <td> k.A.</td>
                                                </tr>*@
                                                @*<tr>
                                                        <th scope="row">Nicht genesen</th>
                                                        <td> .k.A </td>
                                                        <td> .k.A</td>
                                                    </tr>*@
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-7">
                            <div class="card flex-fill">
                                @if (@chartStatus == true)
                                {
                                    <Chart Config="config" @ref="_chart"></Chart>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    StatistikData data = new StatistikData();
    private DailyReport dailyReport = new();
    private Bundesland[] bundeslaender = new Bundesland[16];
    private Landkreis[] lkArray;
    private Bundesland bundesland = new();
    private Landkreis landkreis = new();
    private string stand;
    private string rValue;
    private string rWert7TageVortag;
    private string lkDefult;
    private string path;
    private string rkipPath;
    private bool status;
    private bool chartStatus;

    private Chart _chart;
    private LineConfig config;
    private string ResourcesPath = "Resources/";
    private string StatistikPath;
    private string RKIDataPath;

    private DateTime datum;
    private string value;
    private DBService dbService;
    private BerichtNew bericht;
    List<BundeslandNew> blList;
    private List<LandkreisNew> lkList;
    private LandkreisNew landkreisNew = new();
    private BundeslandNew bundeslandNew = new();

    protected override async Task OnInitializedAsync()
    {
        status = true;
        chartStatus = false;
        data.bl = "Baden-Württemberg";
        data.gen = "Stuttgart";

        StatistikPath = @"" + ResourcesPath + "statistik/json";
        RKIDataPath = @"" + ResourcesPath + "/Rkidata/";

        dbService = new();
        datum = DateTime.Now;
        value = datum.ToString("dd.MM.yyyy");


        await Task.Run(LoadRkiData);
        GetChart();

        if (lkList == null && status == true)
        {
            Logger.LogWarning("RKI-Daten stehen nicht zur Verfügung!");
            lkArray = null;
            status = false;
        }
    }

    private void LoadRkiData()
    {
        try
        {
            string value = "Bericht-" + datum.ToString("dd.MM.yyyy");
            bericht = dbService.FindOneByAttribute<BerichtNew>("id", value);
            stand = bericht.Stand;
            rValue = bericht.RWert7Tage;

            string valueBl = datum.ToString("dd.MM.yyyy");
            IEnumerable<BundeslandNew> bls = dbService.FindAllByAttribute<BundeslandNew>("Stand", valueBl);
            blList = bls.ToList();
            foreach (var bl in blList)
            {
                if (bl.Bundesland == "Baden-Württemberg")
                {
                    bundeslandNew = bl;
                }
            }

            string valueLk = datum.ToString("dd.MM.yyyy");
            IEnumerable<LandkreisNew> lks = dbService.FindAllByAttributes<LandkreisNew>("Stand", valueLk, "bundesland", bundeslandNew.Bundesland);
            lkList = lks.ToList();
            landkreisNew = lkList.First();

            Logger.LogInformation("DailyReport wurde erfolgreich heruntergeladen");
        }
        catch (Exception)
        {
            Logger.LogWarning("DailyReport koennte nicht heruntergeladen werden!");
            blList = null;
            bundeslandNew = null;
            lkList = null;
            landkreisNew = null;
            rValue = ".k.A";
            status = false;
        }
    }

    private void GetBl()
    {
        string valueBundeslandNew = data.bl + "-" + datum.ToString("dd.MM.yyyy");
        bundeslandNew = dbService.FindOneByAttributes<BundeslandNew>("id", valueBundeslandNew, "bundesland", data.bl);

        IEnumerable<LandkreisNew> lks = dbService.FindAllByAttributes<LandkreisNew>("Stand", value, "bundesland", data.bl);
        lkList = lks.ToList();
        landkreisNew = lkList.First();
        data.gen = landkreisNew.ToString();

        GetChart();
    }

    private void GetLk()
    {
        foreach (var lk in lkList)
        {
            if (lk.Stadt == data.gen)
            {
                landkreisNew = lk;
            }
        }

        GetChart();
    }

    private class StatistikData
    {
        [Required]
        public string bl { get; set; }

        [Required]
        public string gen { get; set; }
    }

    private Dictionary<string, int> GetLKDataForChart(string landkreis)
    {
        Dictionary<string, int> rkiDatenLk = new();

        string filePath = @"" + RKIDataPath + "LKReport.json";

        if (!File.Exists(filePath))
        {
            Directory.CreateDirectory(path);
            LKReportJson lKReport = rkiService.GetLKReport("https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Daten/Fallzahlen_Kum_Tab.xlsx?__blob=publicationFile", 4, 4, 5, 3, 228);
            string filename = ("LKReport");
            JSONWriter.Write(lKReport, RKIDataPath, filename);
        }
        LKReportJson lKReportJson = rkiService.LKReportDeserialize(filePath);

        foreach (var item in lKReportJson.LKReport)
        {
            if (item.LKName == landkreis)
            {
                foreach (var reportAttribute in item.LKReportAttribute)
                {
                    //if (reportAttribute.Datum.StartsWith("01") || reportAttribute.Datum.StartsWith("15")
                    //    || reportAttribute.Datum.StartsWith("28"))
                    if (reportAttribute.Datum.StartsWith("01"))
                    {
                        rkiDatenLk.Add(reportAttribute.Datum, reportAttribute.Fahlzahl);
                    }
                }

            }
        }

        return rkiDatenLk;
    }

    private Dictionary<string, int> GetBLDataForChart(string bundesland, Dictionary<string, int> rkiDatenLk)
    {
        Dictionary<string, int> rkiDatenBl = new();

        string filePath = @"" + RKIDataPath + "BLReport.json";
        if (!File.Exists(filePath))
        {
            Directory.CreateDirectory(path);
            Report report = rkiService.GetBLReport("https://www.rki.de/DE/Content/InfAZ/N/Neuartiges_Coronavirus/Daten/Fallzahlen_Kum_Tab.xlsx?__blob=publicationFile", 2, 2, 3, 1, 422);
            string filename = ("BLReport");
            JSONWriter.Write(report, RKIDataPath, filename);
        }
        Report blReportJson = rkiService.BLReportDeserialize(filePath);

        foreach (var item in blReportJson.BLReport)
        {
            if (item.BlName == bundesland)
            {
                foreach (var reportAttribute in item.BLReportAttribute)
                {
                    //if (reportAttribute.Datum.StartsWith("01") || reportAttribute.Datum.StartsWith("15")
                    //    || reportAttribute.Datum.StartsWith("28"))
                    if (reportAttribute.Datum.StartsWith("01"))
                    {
                        rkiDatenBl.Add(reportAttribute.Datum, reportAttribute.Fahlzahl);
                    }
                }

            }
        }


        foreach (var itemBl in rkiDatenBl)
        {
            if (!rkiDatenLk.ContainsKey(itemBl.Key))
            {
                rkiDatenBl.Remove(itemBl.Key);
            }
        }

        return rkiDatenBl;
    }

    private void GetChart()
    {
        if (chartStatus == false)
        {
            Dictionary<string, int> rkiDatenLk = GetLKDataForChart(landkreisNew.LandkreisName);
            Dictionary<string, int> rkiDatenBl = GetBLDataForChart(bundeslandNew.Bundesland, rkiDatenLk);
            if (rkiDatenLk != null)
            {
                config = new();
                IDataset<int> lkDataset = new LineDataset<int>(rkiDatenLk.Values)
                {
                    Label = landkreisNew.LandkreisName,
                    BackgroundColor = "#4AA0CA",
                    BorderColor = "#7FBDD2",
                    Fill = FillingMode.Disabled
                };
                IDataset<int> blDataset = new LineDataset<int>(rkiDatenBl.Values)
                {
                    Label = bundeslandNew.Bundesland,
                    BackgroundColor = "#F35C58",
                    BorderColor = "#F35C58",
                    Fill = FillingMode.Disabled
                };

                config = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Entwicklung der 7-Tage-Fallzahlen"
                        },
                        Tooltips = new Tooltips
                        {
                            Mode = InteractionMode.Nearest,
                            Intersect = true
                        },
                        Hover = new Hover
                        {
                            Mode = InteractionMode.Nearest,
                            Intersect = true
                        },
                        Scales = new Scales
                        {
                            XAxes = new List<CartesianAxis>
{
                            new CategoryAxis
                            {
                                 ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Datum"
                                }
                            }
                        },
                            YAxes = new List<CartesianAxis>
{
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    BeginAtZero = true
                                }
                            }
                     }
                        }
                    }
                };

                foreach (var datum in rkiDatenBl.Keys)
                {
                    config.Data.Labels.Add(datum);
                }
                config.Data.Datasets.Add(blDataset);
                config.Data.Datasets.Add(lkDataset);
            }
            chartStatus = true;
        }
        else
        {
            IList<IDataset> datasets = config.Data.Datasets;
            datasets.Clear();

            Dictionary<string, int> rkiDatenLkDSort = GetLKDataForChart(landkreisNew.LandkreisName);
            Dictionary<string, int> rkiDatenBlSort = GetBLDataForChart(bundeslandNew.Bundesland, rkiDatenLkDSort);

            IDataset<int> blDataset = new LineDataset<int>(rkiDatenBlSort.Values)
            {
                Label = bundeslandNew.Bundesland,
                BackgroundColor = "#F35C58",
                BorderColor = "#F35C58",
                Fill = FillingMode.Disabled
            };
            IDataset<int> lkDataset2 = new LineDataset<int>(rkiDatenLkDSort.Values)
            {
                Label = landkreisNew.LandkreisName,
                BackgroundColor = "#4AA0CA",
                BorderColor = "#7FBDD2",
                Fill = FillingMode.Disabled
            };

            config.Data.Datasets.Add(blDataset);
            config.Data.Datasets.Add(lkDataset2);
            _chart.Update();

        }
    }
}