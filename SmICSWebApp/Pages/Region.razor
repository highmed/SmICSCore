@page "/region"

@using SmICSCoreLib.StatistikDataModels
@using SmICSCoreLib.StatistikServices
@using System.ComponentModel.DataAnnotations
@using System
@using System.Collections;
@using System.IO;
@using ChartJs.Blazor.LineChart
@using SmICSCoreLib.JSONFileStream;

@inject RkiRestApi rkiRestApi

<h3>Statistik (Prototyp)</h3>

<div class="card">
    <div class="row">
        <StatistikNav>
        </StatistikNav>

        <div class="card-body col-10">
            <div style="padding: 0px 0px 100px 0px;">
                @if (lkArray == null)
                {
                    @if (status == true)
                    {
                        <p><em>Daten werden geladen...</em></p>
                        <div class="spinner"></div> }
                    else
                    {
                        <p><em>Es stehen momentan leider keine Daten zu Verfügung!</em></p>
                        <p><em>Versuchen Sie bitte später diese Seite aufzurufen!</em></p>
                    }
                }
                else
                {
                    <div class="row">
                        <div class="col-5">
                            <div class="card flex-fill">
                                <div class="card-header" style="padding-top: 10px;">
                                    <h5 class="card-title">Vergleich Region-Bundesland</h5>
                                    <EditForm Model="@data">
                                        <div style="display: inline-flex; ">
                                            <div>
                                                <label>Bundesland: </label>
                                                <InputSelect @bind-Value="data.bl" @onclick="@GetBl">
                                                    @foreach (var item in bundeslaender)
                                                        {
                                                        <option value="@item.BlAttribute.Bundesland"> @item.BlAttribute.Bundesland</option>}
                                                    }
                                                </InputSelect>
                                            </div>

                                            <div>
                                                <label>Region: </label>
                                                <InputSelect @bind-Value="data.gen" @onclick="@GetLk">
                                                    @foreach (var item in @lkArray)
                                                        {
                                                        <option value="@item.Stadt">
                                                            @item.Stadt
                                                        </option>
                                                        }
                                                </InputSelect>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                                <div class="card-body">
                                    <p> Stand @stand</p>
                                    <div class="table-wrapper-scroll-y my-custom-scrollbar">
                                        <table class="table table-bordered table-hover mb-0">
                                            <thead style="background-color: #7FBDD2;">
                                                <tr>
                                                    <th scope="col">Daten</th>
                                                    <th scope="col">@landkreis.Stadt</th>
                                                    <th scope="col">@bundesland.BlAttribute.Bundesland</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <th scope="row">Fallzahl</th>
                                                    <td>@landkreis.FallzahlGesamt</td>
                                                    <td>@bundesland.BlAttribute.FallzahlGesamt</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Fallzahl pro 100.000 Einwohner</th>
                                                    <td>@landkreis.FaellePro100000Ew </td>
                                                    <td>@bundesland.BlAttribute.FaellePro100000Ew</td>
                                                </tr>

                                                <tr>
                                                    <th scope="row">Fälle in den letzten 7 Tagen</th>
                                                    <td>@landkreis.Faelle7Lk</td>
                                                    <td>@bundesland.BlAttribute.Faelle7BL</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">7-Tage-Inzidenz</th>
                                                    <td>@landkreis.Inzidenz7Tage</td>
                                                    <td>@bundesland.BlAttribute.Inzidenz7Tage</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">7-Tage-R-Wert</th>
                                                    <td> @rValue</td>
                                                    <td> @rValue</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Verstorben</th>
                                                    <td>@landkreis.Todesfaelle</td>
                                                    <td>@bundesland.BlAttribute.Todesfaelle</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Verstorben in den letzten 7 Tagen</th>
                                                    <td>@landkreis.Todesfaelle7Lk</td>
                                                    <td>@bundesland.BlAttribute.Todesfaelle7BL</td>
                                                </tr>
                                                <tr>
                                                    <th scope="row">Genesen</th>
                                                    <td> k.A.</td>
                                                    <td> k.A.</td>
                                                </tr>
                                                @*<tr>
                                                        <th scope="row">Nicht genesen</th>
                                                        <td> .k.A </td>
                                                        <td> .k.A</td>
                                                    </tr>*@
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-7">
                            <div class="card flex-fill">
                                @if (@chartStatus == true)
                                {
                                    <Chart Config="config" @ref="_chart"></Chart>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    StatistikData data = new StatistikData();
    private DailyReport dailyReport = new();
    private Bundesland[] bundeslaender = new Bundesland[16];
    private Landkreis[] lkArray;
    private Bundesland bundesland = new();
    private Landkreis landkreis = new();
    private string stand;
    private string rValue = "";
    private string lkDefult;
    private string path;
    private bool status;
    private bool chartStatus;
    private int anzahlFaelle;
    private int anzahlPatTage;

    private Chart _chart;
    private LineConfig config;

    protected override async Task OnInitializedAsync()
    {
        status = true;
        chartStatus = false;
        data.bl = "Baden-Württemberg";
        data.gen = "Stuttgart";
        await Task.Run(LoadRValue);
        await Task.Run(LoadRkiData);
        GetChart();
    }

    private void LoadRkiData()
    {
        try
        {
            path = @"../SmICSWebApp/Resources/statistik/json/" + DateTime.Now.ToString("yyyy-MM-dd") + ".json";
            dailyReport = rkiRestApi.DeserializeRkiData(path);
            if (dailyReport != null)
            {
                stand = dailyReport.Bericht.Stand;
                bundeslaender = dailyReport.Bericht.Bundesland;
                foreach (var item in bundeslaender)
                {
                    if (item.BlAttribute.Bundesland == "Baden-Württemberg")
                    {
                        bundesland = item;
                        lkArray = item.Landkreise;
                        landkreis = lkArray.First();
                    }
                }
            }
            else
            {
                rkiRestApi.SerializeRkiData();
                dailyReport = rkiRestApi.DeserializeRkiData(path);
                if (dailyReport != null)
                {
                    stand = dailyReport.Bericht.Stand;
                    bundeslaender = dailyReport.Bericht.Bundesland;
                    foreach (var item in bundeslaender)
                    {
                        if (item.BlAttribute.Bundesland == "Baden-Württemberg")
                        {
                            bundesland = item;
                            lkArray = item.Landkreise;
                            landkreis = lkArray.First();
                        }
                    }
                }
            }
        }
        catch (Exception)
        {
            bundeslaender = null;
            bundesland = null;
            lkArray = null;
            landkreis = null;
            status = false;
        }
    }

    private void LoadRValue()
    {
        rValue = rkiRestApi.GetRValue(2).Replace(",", ".");
        if (rValue == null)
        {
            rValue = ".k.A";
        }
    }

    private void GetBl()
    {
        foreach (var item in bundeslaender)
        {
            if (item.BlAttribute.Bundesland == data.bl)
            {
                bundesland = item;
                lkArray = item.Landkreise;
                landkreis = lkArray.First();
                data.gen = landkreis.ToString();
            }
        }

        GetChart();
    }

    private void GetLk()
    {
        foreach (var item in lkArray)
        {
            if (item.Stadt == data.gen)
            {
                landkreis = item;
            }
        }

        GetChart();
    }

    private class StatistikData
    {
        [Required]
        public string bl { get; set; }

        [Required]
        public string gen { get; set; }
    }

    private Dictionary<string, int> GetLKDataForChart(string landkreis)
    {
        Dictionary<string, int> rkiDatenLk = new();

        string filePath = @"../SmICSWebApp/Resources/Rkidata/LKReport.json";
        LKReportJson lKReportJson = rkiRestApi.LKReportDeserialize(filePath);

        foreach (var item in lKReportJson.LKReport)
        {
            if (item.LKName == landkreis)
            {
                foreach (var reportAttribute in item.LKReportAttribute)
                {
                    //if (reportAttribute.Datum.StartsWith("01") || reportAttribute.Datum.StartsWith("15")
                    //    || reportAttribute.Datum.StartsWith("28"))
                    if (reportAttribute.Datum.StartsWith("01"))
                    {
                        rkiDatenLk.Add(reportAttribute.Datum, reportAttribute.Fahlzahl);
                    }
                }

            }
        }

        return rkiDatenLk;
    }

    private Dictionary<string, int> GetBLDataForChart(string bundesland, Dictionary<string, int> rkiDatenLk)
    {
        Dictionary<string, int> rkiDatenBl = new();

        //Report blReportJson = rkiRestApi.BLReportDeserialize("BLReport - 2021");
        string filePath = @"../SmICSWebApp/Resources/Rkidata/BLReport.json";
        Report blReportJson = rkiRestApi.BLReportDeserialize(filePath);

        foreach (var item in blReportJson.BLReport)
        {
            if (item.BlName == bundesland)
            {
                foreach (var reportAttribute in item.BLReportAttribute)
                {
                    //if (reportAttribute.Datum.StartsWith("01") || reportAttribute.Datum.StartsWith("15")
                    //    || reportAttribute.Datum.StartsWith("28"))
                    if (reportAttribute.Datum.StartsWith("01"))
                    {
                        rkiDatenBl.Add(reportAttribute.Datum, reportAttribute.Fahlzahl);
                    }
                }

            }
        }


        foreach (var itemBl in rkiDatenBl)
        {
            if (!rkiDatenLk.ContainsKey(itemBl.Key))
            {
                rkiDatenBl.Remove(itemBl.Key);
            }
        }

        return rkiDatenBl;
    }

    private void GetChart(){

        if (chartStatus == false)
        {
            Dictionary<string, int> rkiDatenLk = GetLKDataForChart(landkreis.LandkreisName);
            Dictionary<string, int> rkiDatenBl = GetBLDataForChart(bundesland.BlAttribute.Bundesland, rkiDatenLk);
            if (rkiDatenLk != null)
            {
                config = new();
                IDataset<int> lkDataset = new LineDataset<int>(rkiDatenLk.Values)
                {
                    Label = landkreis.LandkreisName,
                    BackgroundColor = "#4AA0CA",
                    BorderColor = "#7FBDD2",
                    Fill = FillingMode.Disabled
                };
                IDataset<int> blDataset = new LineDataset<int>(rkiDatenBl.Values)
                {
                    Label = bundesland.BlAttribute.Bundesland,
                    BackgroundColor = "#F35C58",
                    BorderColor = "#F35C58",
                    Fill = FillingMode.Disabled
                };

                config = new LineConfig
                {
                    Options = new LineOptions
                    {
                        Title = new OptionsTitle
                        {
                            Display = true,
                            Text = "Entwicklung der 7-Tage-Fallzahlen"
                        },
                        Tooltips = new Tooltips
                        {
                            Mode = InteractionMode.Nearest,
                            Intersect = true
                        },
                        Hover = new Hover
                        {
                            Mode = InteractionMode.Nearest,
                            Intersect = true
                        },
                        Scales = new Scales
                        {
                            XAxes = new List<CartesianAxis>
        {
                            new CategoryAxis
                            {
                                 ScaleLabel = new ScaleLabel
                                {
                                    LabelString = "Datum"
                                }
                            }
                        },
                            YAxes = new List<CartesianAxis>
         {
                            new LinearCartesianAxis
                            {
                                Ticks = new LinearCartesianTicks
                                {
                                    BeginAtZero = true
                                }
                            }
                     }
                        }
                    }
                };

                foreach (var datum in rkiDatenBl.Keys)
                {
                    config.Data.Labels.Add(datum);
                }
                config.Data.Datasets.Add(blDataset);
                config.Data.Datasets.Add(lkDataset);
            }
            chartStatus = true;
        }
        else
        {
            IList<IDataset> datasets = config.Data.Datasets;
            datasets.Clear();
            Dictionary<string, int> rkiDatenLkDSort = GetLKDataForChart(landkreis.LandkreisName);
            Dictionary<string, int> rkiDatenBlSort = GetBLDataForChart(bundesland.BlAttribute.Bundesland, rkiDatenLkDSort);

            IDataset<int> blDataset = new LineDataset<int>(rkiDatenBlSort.Values)
            {
                Label = bundesland.BlAttribute.Bundesland,
                BackgroundColor = "#F35C58",
                BorderColor = "#F35C58",
                Fill = FillingMode.Disabled
            };
            IDataset<int> lkDataset2 = new LineDataset<int>(rkiDatenLkDSort.Values)
            {
                Label = landkreis.LandkreisName,
                BackgroundColor = "#4AA0CA",
                BorderColor = "#7FBDD2",
                Fill = FillingMode.Disabled
            };

            config.Data.Datasets.Add(blDataset);
            config.Data.Datasets.Add(lkDataset2);
            _chart.Update();

        }
    }
}