@page "/MiBi"

@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using System.Drawing;


@using SmICSCoreLib.AQL.MiBi.WardOverview
@using Data


@inject MibiViewService _service

<h3>MibiView</h3>
<div class="card">
    <div class="card-body">
        <EditForm Model="@parameter" OnValidSubmit="@Submit">

            <label for="stationDropdown" class="mr-1">Station</label>
            <select id="stationDropdow" class="col-2 mr-2" @bind="@parameter.Ward">
                <option>Station 1</option>
                <option>Station 2</option>
                <option>Station 3</option>
                <option>47</option>
            </select>
            <label for="pathogenDropdown" class="mr-1">Erreger</label>
            <select id="pathogenDropdown" class="col-1 mr-2" @bind="@parameter.MRE">
                <option>MRSA</option>
                <option>3 MRGN</option>
                <option>4 MRGN</option>
                <option>VRE </option>
            </select>
            <label for="startdate" class="mr-1">Start</label>
            <InputDate id="startdate" class="col-1 mr-2" @bind-Value="parameter.Start" />
            <label for="enddate" class="mr-1">Ende</label>
            <InputDate id="enddate" class="col-1 mr-2" @bind-Value="parameter.End" />
            <button type="submit" class="btn btn-outline-primary"><i class="oi oi-magnifying-glass"></i></button>

        </EditForm>
    </div>
</div>


     
@if (data != null)
{
    <div class="row">
        <div class="card w-50">
            <div class="card-body">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th class="text-center">Patient</th>
                            @if (HasPatientData())
                            {
                                <th>Name</th>
                                <th>Geburtstag</th>
                                <th>Sex</th>
                            }
                            <th class="text-center">Stationstest</th>
                            <th class="text-center">Nosokomial</th>
                            <th class="text-center">TestDatum</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (MibiViewModel item in data)
                        {
                            <tr>
                                <td class="text-center">
                                    <ContextMenu Id="@item.LabData.PatientID">
                                        <Item OnClick="@OnContextClick">Patientenansicht</Item>
                                        <Item OnClick="@OnContextClick">Kontakte</Item>
                                    </ContextMenu>

                                    <ContextMenuTrigger MenuId="@item.LabData.PatientID">
                                        @item.LabData.PatientID
                                    </ContextMenuTrigger>
                                </td>
                                @if (item.PatientData != null)
                                {
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                }
                                <td class="text-center">@item.LabData.OnWard</td>
                                <td class="text-center">@item.LabData.Nosokomial</td>
                                <td class="text-center">@item.LabData.TestDate</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="card w-50">
            <div class="card-body">
                <Chart Config="_chart"></Chart>
            </div>
        </div>
    </div>
}

@code {

    private List<MibiViewModel> data { get; set; } = null;
    private WardOverviewParameters parameter = new WardOverviewParameters();

    private string PathogenParam { get; set; }
    private string WardParam { get; set; }
    private DateTime StartDateParam { get; set; }
    private DateTime EndDateParam { get; set; }

    private BarConfig _chart;

    private string[] XAxisLabels { get; set; }

    private bool isLoading = false;
    private void Submit()
    {
        isLoading = true;
        data = _service.GetData(parameter);

        _chart = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Epidemiologische Kurve der Station: " + parameter.Ward
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                {
                        new BarCategoryAxis
                        {
                            Stacked = true
                        }
                    },
                    YAxes = new List<CartesianAxis>
                {
                        new BarLinearCartesianAxis
                        {
                            Stacked = true
                        }
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Index,
                    Intersect = false
                },
            }
        };

        IDataset<int> NosokomialOnWard = new BarDataset<int>()
        {
            Label = "Nosokomial",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red)
        };

        IDataset<int> NosokomialOtherWard = new BarDataset<int>()
        {
            Label = "Auf anderer Station nosokomial nachgewiesen",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Blue)
        };

        IDataset<int> Known = new BarDataset<int>()
        {
            Label = "Bekannter Träger",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Green)
        };

        GetXAxisLabels();
        FillAllDatasets(NosokomialOnWard, NosokomialOtherWard, Known);
        _chart.Data.Datasets.Add(NosokomialOnWard);
        _chart.Data.Datasets.Add(NosokomialOtherWard);
        _chart.Data.Datasets.Add(Known);

        isLoading = false;
    }

    private void GetXAxisLabels()
    {
        for (DateTime date = parameter.Start.Date; date <= parameter.End.Date; date = date.AddDays(1.0))
        {
            _chart.Data.Labels.Add(date.ToString("dd.MM"));
        }
    }

    private void FillAllDatasets(IDataset<int> NosokomialOnWard, IDataset<int> NosokomialOtherWard, IDataset<int> Known)
    {
        Dictionary<string, SortedDictionary<DateTime, int>> chartEntries = new Dictionary<string, SortedDictionary<DateTime, int>>();

        chartEntries.Add("NosokomialOnWard", new SortedDictionary<DateTime, int>());
        chartEntries.Add("NosokomialOtherWard", new SortedDictionary<DateTime, int>());
        chartEntries.Add("Known", new SortedDictionary<DateTime, int>());


        for (DateTime date = parameter.Start.Date; date <= parameter.End.Date; date = date.AddDays(1.0))
        {
            chartEntries["NosokomialOnWard"].Add(date, 0);
            chartEntries["NosokomialOtherWard"].Add(date, 0);
            chartEntries["Known"].Add(date, 0);
        }

        IEnumerable<MibiViewModel> orderedData = data.OrderBy(x => x.LabData.TestDate);
        foreach (MibiViewModel mv in orderedData)
        {
            if (mv.LabData.Nosokomial && mv.LabData.OnWard)
            {
                chartEntries["NosokomialOnWard"][mv.LabData.TestDate.Date] += 1;
            }
            else if (mv.LabData.Nosokomial && !mv.LabData.OnWard)
            {
                chartEntries["NosokomialOtherWard"][mv.LabData.TestDate.Date] += 1;
            }
            else if (!mv.LabData.NewCase)
            {
                chartEntries["Known"][mv.LabData.TestDate.Date] += 1;
            }
        }

        FillDataset(NosokomialOnWard, chartEntries["NosokomialOnWard"]);
        FillDataset(NosokomialOtherWard, chartEntries["NosokomialOtherWard"]);
        FillDataset(Known, chartEntries["Known"]);
    }

    private void FillDataset(IDataset<int> dataset, SortedDictionary<DateTime, int> FillValues)
    {
        foreach (KeyValuePair<DateTime, int> kvp in FillValues)
        {
            dataset.Add(kvp.Value);
        }
    }

    private bool HasPatientData()
    {
        foreach (MibiViewModel vm in data)
        {
            if (vm.PatientData != null)
            {
                return true;
            }
        }
        return false;
    }

    private void OnContextClick(ItemClickEventArgs e)
    {
        Console.WriteLine($"Item Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuItem: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    }
}
