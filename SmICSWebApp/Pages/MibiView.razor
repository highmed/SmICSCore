@page "/MiBi"

@using SmICSCoreLib.AQL.MiBi.WardOverview
@using Data


@inject MibiViewService _service

<h3>MibiView</h3>

<EditForm Model="@parameter" OnValidSubmit="@Submit">
    <div class="form-row">
        <label for="stationDropdown">Station</label>
        <select id="stationDropdow" class="col-2" @bind="@parameter.Ward">
            <option>Station 1</option>
            <option>Station 2</option>
            <option>Station 3</option>
            <option>47</option>
        </select>
        <label for="pathogenDropdown">Erreger</label>
        <select id="pathogenDropdown" class="col-2" @bind="@parameter.MRE">
            <option>MRSA</option>
            <option>3 MRGN</option>
            <option>4 MRGN</option>
            <option>VRE </option>
        </select>
        <label for="startdate">Start</label>
        <InputDate id="startdate" class="col-2" @bind-Value="parameter.Start"/>
        <label for="enddate">Ende</label>
        <InputDate id="enddate" class="col-2" @bind-Value="parameter.End"/>
        <button type="submit" class="col-2">Suche</button>
    </div>
</EditForm>

@if (data != null)
{
<div class="row">
    <div class="w-50">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th class="text-center">Patient</th>
                    @if (HasPatientData())
                    {
                        <th>Name</th>
                        <th>Geburtstag</th>
                        <th>Sex</th>
                    }
                    <th class="text-center">Stationstest</th>
                    <th class="text-center">Nosokomial</th>
                    <th class="text-center">TestDatum</th>
                </tr>
            </thead>
            <tbody>
                @foreach (MibiViewModel item in data)
                {
                    <tr>
                        <td class="text-center">@item.LabData.PatientID</td>
                        @if (item.PatientData != null)
                        {
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        }
                        <td class="text-center">@item.LabData.OnWard</td>
                        <td class="text-center">@item.LabData.Nosokomial</td>
                        <td class="text-center">@item.LabData.TestDate</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="w-50">
        <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
    </div>
</div>
}

@code {

    private List<MibiViewModel> data { get; set; } = null;
    private WardOverviewParameters parameter = new WardOverviewParameters();

    private string PathogenParam { get; set; }
    private string WardParam { get; set; }
    private DateTime StartDateParam { get; set; }
    private DateTime EndDateParam { get; set; }

    private List<ChartSeries> Series { get; set; }
    private string[] XAxisLabels { get; set; }

    private void Submit()
    {
        data = _service.GetData(parameter);

        Series = GetEpicurveData();
        XAxisLabels = GetXAxisLabels();
    }

    private bool HasPatientData()
    {
        foreach(MibiViewModel vm in data)
        {
            if (vm.PatientData != null)
            {
                return true;
            }
        }
        return false;
    }


    private List<ChartSeries> GetEpicurveData()
    {
        List<ChartSeries> charts = new List<ChartSeries>();
        Dictionary<string, SortedDictionary<DateTime, double>> chartEntries = new Dictionary<string, SortedDictionary<DateTime, double>>();

        chartEntries.Add("NosokomialOnWard", new SortedDictionary<DateTime, double>());
        chartEntries.Add("NosokomialOtherWard", new SortedDictionary<DateTime, double>());
        chartEntries.Add("Known", new SortedDictionary<DateTime, double>());


        for (DateTime date = parameter.Start.Date; date <= parameter.End.Date; date = date.AddDays(1.0))
        {
            chartEntries["NosokomialOnWard"].Add(date, 0);
            chartEntries["NosokomialOtherWard"].Add(date, 0);
            chartEntries["Known"].Add(date, 0);
        }
        IEnumerable<MibiViewModel> orderedData = data.OrderBy(x => x.LabData.TestDate);
        foreach (MibiViewModel mv in orderedData)
        {
            if(mv.LabData.Nosokomial && mv.LabData.OnWard)
            {
                chartEntries["NosokomialOnWard"][mv.LabData.TestDate.Date] += 1;
            }
            else if (mv.LabData.Nosokomial && !mv.LabData.OnWard)
            {
                chartEntries["NosokomialOtherWard"][mv.LabData.TestDate.Date] += 1;
            }
            else if (!mv.LabData.NewCase)
            {
                chartEntries["Known"][mv.LabData.TestDate.Date] += 1;
            }
        }

        charts.Add(new ChartSeries { Name= "Known", Data = chartEntries["Known"].Values.ToArray<double>() });
        charts.Add(new ChartSeries { Name= "NosokomialOtherWard", Data = chartEntries["NosokomialOtherWard"].Values.ToArray<double>() });
        charts.Add(new ChartSeries { Name= "NosokomialOnWard", Data = chartEntries["NosokomialOnWard"].Values.ToArray<double>() });

        return charts;
    }


    private string[] GetXAxisLabels()
    {
        List<string> labels = new List<string>();
        for (DateTime date = parameter.Start.Date; date <= parameter.End.Date; date = date.AddDays(1.0))
        {
            labels.Add(date.ToString("dd.MM"));
        }
        return labels.ToArray();
    }
}
