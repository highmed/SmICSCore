@page "/rkiconfig"

@using System.IO
@using Microsoft.Extensions.Logging
@using SmICSCoreLib.AQL.RKIConfig
@using Newtonsoft.Json.Linq
@using SmICSWebApp.Data

@inject RKIConfigService RKIConfigService


<div class="">
    <div class="welcome_header_config">
        <h1>RKI Konfigurationen</h1>
    </div>
    <div class="welcome_text_config">
        <div class="index_config">
            <div class="index-text_config">
                <span class="oi oi-info" aria-hidden="true">&nbsp;&nbsp;</span> In diesem Bereich können Informationen hinterlegt werden, die die Handhabung dieser Funktion für den Nutzer erklärt.
            </div>
            <div id="div_card_1" class="">
                <EditForm Model="@RKIConfigForm" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div id="div_card_2">

                        <div id="div_card_3_a">
                            <span class="span-tr">Regeln</span>
                            @foreach (var frag in DynamicFragment)
                            {
                                <div class="sort_card">
                                    <div id="div_card_4" class="space-1">
                                        @frag
                                    </div>
                                    <div id="div_card_4" class="space-2">
                                        <button id="btn" type="button" @onclick="()=>DeleteRules(frag)"><i class="oi oi-minus"></i></button>
                                    </div>
                                </div>
                                
                            }
                        </div>

                        <div id="div_card_3_b">
                            <div>
                                <button id="btn" type="button" @onclick="@AddRules"><i class="oi oi-plus"></i></button>
                            </div>
                        </div>

                        <div id="div_card_3_c">
                            <div>
                                <label for="Zeitpunkt" class="tb_bez">Tgl. Ausführuhrzeit d. Regeln</label>
                            </div>
                            <div>
                                <InputText type="time" @bind-Value="@Zeitpunkt" class="input-field" />
                            </div>
                        </div>

                    </div>
                    <div id="div_card_2" style="display: flex; justify-content: flex-end; padding:0%;">
                        <input id="button" type="submit" value="Ausführen" />
                    </div>
                </EditForm>
                <div class="span_hr">
                    <span>&nbsp;</span>
                </div>
                <div id="div_card_2">
                    <div id="div_card_3">
                        <div>
                            
                        </div>
                    </div>
                    <div id="div_card_3">
                        <div>

                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


@code {
    private List<RenderFragment> DynamicFragment = new List<RenderFragment>();

    private RKIConfigTemplate RKIConfigForm = new RKIConfigTemplate();
    private string Zeitpunkt;

    private void HandleValidSubmit()
    {
        Zeitpunkt = DateTime.Now.ToString("h:mm:ss tt");
    }

    private void DeleteRules(RenderFragment frag)
    {
        DynamicFragment.Remove(frag);
    }

    private void AddRules()
    {
        RKIConfigTemplate RKIConfigFormAdds = new RKIConfigTemplate();
        RKIConfigForm.RKIConfigFormAdd.Add(RKIConfigFormAdds);

        DynamicFragment.Add(CreateComponent(RKIConfigFormAdds, DynamicFragment.Count));
    }

    private RenderFragment CreateComponent(RKIConfigTemplate RKIConfigFormAdds, int ID) => builder =>
    {
        var propGetExpr = System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression.Constant(RKIConfigFormAdds), "Station");
        var StationExpr = System.Linq.Expressions.Expression.Lambda<Func<System.String>>(propGetExpr);
        propGetExpr = System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression.Constant(RKIConfigFormAdds), "Erreger");
        var ErregerExpr = System.Linq.Expressions.Expression.Lambda<Func<System.String>>(propGetExpr);
        propGetExpr = System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression.Constant(RKIConfigFormAdds), "Zeitraum");
        var ZeitraumExpr = System.Linq.Expressions.Expression.Lambda<Func<System.String>>(propGetExpr);


        builder.OpenComponent<RKIConfigRules>(0);
        builder.AddAttribute(0, "Station", RKIConfigFormAdds.Station);
        //builder.AddAttribute(0, "StationChanged", EventCallback.Factory.Create<System.String>(this, str => RKIConfigFormAdds.Station = str));
        //builder.AddAttribute(0, "StationExpression", StationExpr);
        builder.AddAttribute(0, "Erreger", RKIConfigFormAdds.Erreger);
        //builder.AddAttribute(0, "ErregerChanged", EventCallback.Factory.Create<System.String>(this, str => RKIConfigFormAdds.Erreger = str));
        //builder.AddAttribute(0, "ErregerExpression", ErregerExpr);
        builder.AddAttribute(0, "Zeitraum", RKIConfigFormAdds.Zeitraum);
        //builder.AddAttribute(0, "ZeitraumChanged", EventCallback.Factory.Create<System.String>(this, str => RKIConfigFormAdds.Zeitraum = str));
        //builder.AddAttribute(0, "ZeitraumExpression", ZeitraumExpr);
        builder.AddAttribute(0, "Retro", RKIConfigFormAdds.Retro);
        builder.AddAttribute(0, "ID", ID);
        builder.CloseComponent();
    };

}