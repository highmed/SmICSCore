@using SmICSCoreLib.Factories.PatientMovementNew.PatientStays
@using SmICSWebApp.Data.WardView

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th class="text-center">Patient</th>
            <th class="text-center">Fall</th>
            <th class="text-center">Resistenz</th>
            @if (HasPatientData())
            {
                <th>Name</th>
                <th>Geburtstag</th>
                <th>Sex</th>
            }
            <th class="text-center">
                1.Positiver (Fall)
                <i class="oi oi-elevator" @onclick="() => Sort(p => p.FirstPositiveResult)"></i>
            </th>
            <th class="text-center">letzter Positver (Fall) <i class="oi oi-elevator" @onclick="() => Sort(p => p.CurrentResult)"></i></th>
            <th class="text-center">1.Positver (Station) <i class="oi oi-elevator" @onclick="() => Sort(p => p.FirstWardPositiveResult)"></i></th>
            <th class="text-center">letzter Positver (Stations) <i class="oi oi-elevator" @onclick="() => Sort(p => p.LastWardResult)"></i></th>
            <th class="text-center">Stationsaufnahme <i class="oi oi-elevator" @onclick="() => Sort(p => p.Admission)"></i></th>
            <th class="text-center">Stationsentlassung <i class="oi oi-elevator" @onclick="() => Sort(p => p.Discharge)"></i></th>
        </tr>
    </thead>
    <tbody>
        @foreach (WardPatient patient in WardPatients)
        {
            <WardTableRow Patient="patient" WardParameter="Parameter" />
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<WardPatient> WardPatients { get; set; }

    [Parameter]
    public WardParameter Parameter { get; set; }

    private Func<WardPatient, IComparable> Prop;
    private bool IsMinSorted = false;

    private bool HasPatientData()
    {
        foreach (WardPatient patient in WardPatients)
        {
            if (patient.PatientData != null)
            {
                return true;
            }
        }
        return false;
    }

    private void Sort(Func<WardPatient, IComparable> getProp)
    {
        Console.WriteLine(Prop == getProp);
        List<WardPatient> ordered;
        if (WardPatients != null && WardPatients.Count > 0 && (Prop != getProp || !(Prop == getProp && IsMinSorted)))
        {
            Prop = getProp;
            IsMinSorted = true;
            ordered = WardPatients.Where(x => getProp(x) is not null).OrderBy(x => getProp(x)).ToList();
            ordered.AddRange(WardPatients.Where(x => getProp(x) is null).ToList());
            WardPatients = ordered;
        }
        else
        {
            IsMinSorted = false;
            ordered = WardPatients.Where(x => getProp(x) is not null)
            .OrderByDescending(x => getProp(x))
            .ToList();
            ordered.AddRange(WardPatients.Where(x => getProp(x) is null).ToList());
            WardPatients = ordered;
        }
    }
}
