@using SmICSCoreLib.Factories.PatientMovementNew.PatientStays
@using SmICSWebApp.Data.WardView

<tr>
    <td class="text-center">

        <ContextMenu Id="@Patient.PatientID">
            <Item OnClick="@OnContextClick"><a href="/patient/@(Patient.PatientID)">Patientenansicht</a></Item>
            <Item OnClick="@OnContextClick"><a href="/contact/@(Patient.PatientID)"> Kontakte </a> </Item>
        </ContextMenu>

        <ContextMenuTrigger MenuId="@Patient.PatientID">
            @if (_nosocomial)
            {
                <span class="text-danger"> @Patient.PatientID</span>
            }
            else if (_known)
            {
                <span class="text-primary"> @Patient.PatientID</span>
            }
            else
            {
                @Patient.PatientID
            }
        </ContextMenuTrigger>
    </td>
    <td>
        @if (_nosocomial)
        {
            <span class="text-danger">
                @string.Join("/", Patient.InfectionStatus.Values.Where(x => x.Nosocomial).Select(x => x.Resistance))
            </span>
        }
        @if (_known)
        {
            <span class="text-primary">
                @string.Join("/", Patient.InfectionStatus.Values.Where(x => x.Known || (Patient.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate < Patient.Admission))).Select(x => x.Resistance))
            </span>
        }
    </td>
    @if (Patient.PatientData != null)
    {
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    }
    <WardTableDateCell Date="@Patient.FirstPositiveResult" />
    <WardTableDateCell Date="@Patient.FirstWardPositiveResult" />
    <WardTableDateCell Date="@Patient.LastWardResult" />
    <WardTableDateCell Date="@Patient.CurrentResult" />
    <WardTableDateCell Date="@Patient.Admission" />
    <WardTableDateCell Date="@Patient.Discharge" />
</tr>

@code {

    [Parameter]
    public WardPatient Patient { get; set; }

    [Parameter]
    public WardParameter WardParameter { get; set; }

    private bool _nosocomial;
    private bool _known;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.TryGetValue<WardPatient>("WardOverview", out WardPatient overview);
        parameters.TryGetValue<WardParameter>("WardParameter", out WardParameter parameter);

        await base.SetParametersAsync(parameters);

        _nosocomial = Patient.InfectionStatus != null && Patient.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate > Patient.Admission && (Patient.Discharge.HasValue ? x.NosocomialDate <= Patient.Discharge : true));
        _known = Patient.InfectionStatus != null && (Patient.InfectionStatus.Values.Any(x => x.Known) || Patient.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate < Patient.Admission));
    }


    private void OnContextClick(ItemClickEventArgs e)
    {
        Console.WriteLine($"WardOverview Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuWardOverview: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    }

}
