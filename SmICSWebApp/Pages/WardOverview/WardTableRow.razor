@using SmICSCoreLib.Factories.PatientMovementNew.PatientStays
@using SmICSWebApp.Data.WardView

<tr>
    <td class="text-center">

        <ContextMenu Id="@WardOverview.PatientStay.PatientID">
            <Item OnClick="@OnContextClick"><a href="/patient/@(WardOverview.PatientStay.PatientID)">Patientenansicht</a></Item>
            <Item OnClick="@OnContextClick"><a href="/contact/@(WardOverview.PatientStay.PatientID)"> Kontakte </a> </Item>
        </ContextMenu>

        <ContextMenuTrigger MenuId="@WardOverview.PatientStay.PatientID">
            @if (_nosocomial)
            {
                <span class="text-danger"> @WardOverview.PatientStay.PatientID</span>
            }
            else if (_known)
            {
                <span class="text-primary"> @WardOverview.PatientStay.PatientID</span>
            }
            else
            {
                @WardOverview.PatientStay.PatientID
            }
        </ContextMenuTrigger>
    </td>
    <td>
        @if (_nosocomial)
        {
            <span class="text-danger">
                @string.Join("/", WardOverview.InfectionStatus.Values.Where(x => x.Nosocomial).Select(x => x.Resistance))
            </span>
        }
        @if (_known)
        {
            <span class="text-primary">
                @string.Join("/", WardOverview.InfectionStatus.Values.Where(x => x.Known || (WardOverview.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate < WardOverview.PatientStay.Admission))).Select(x => x.Resistance))
            </span>
        }
    </td>
    @if (WardOverview.PatientData != null)
    {
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    }
    <WardTableDateCell Date="WardOverview.GetFirstPositveLabResultDate()" />
    <WardTableDateCell Date="WardOverview.GetFirstWardLabResultDate(WardOverview.PatientStay.Admission, WardOverview.PatientStay.Discharge.Value)" />
    <WardTableDateCell Date=" WardOverview.GetLastWardLabResultDate(WardParameter.Start, WardParameter.End)" />
    <WardTableDateCell Date=" WardOverview.GetLastLabResultDate()" />
    <WardTableDateCell Date="WardOverview.PatientStay.Admission" />
    <WardTableDateCell Date="WardOverview.PatientStay.Discharge" />
</tr>

@code {

    [Parameter]
    public WardOverview WardOverview { get; set; }

    [Parameter]
    public WardParameter WardParameter { get; set; }

    private bool _nosocomial;
    private bool _known;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.TryGetValue<WardOverview>("WardOverview", out WardOverview overview);
        parameters.TryGetValue<WardParameter>("WardParameter", out WardParameter parameter);

        await base.SetParametersAsync(parameters);

        _nosocomial = WardOverview.InfectionStatus != null && WardOverview.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate > WardOverview.PatientStay.Admission && (WardOverview.PatientStay.Discharge.HasValue ? x.NosocomialDate <= WardOverview.PatientStay.Discharge : true));
        _known = WardOverview.InfectionStatus != null && (WardOverview.InfectionStatus.Values.Any(x => x.Known) || WardOverview.InfectionStatus.Values.Any(x => x.Nosocomial && x.NosocomialDate < WardOverview.PatientStay.Admission));
    }


    private void OnContextClick(ItemClickEventArgs e)
    {
        Console.WriteLine($"WardOverview Clicked => Menu: {e.ContextMenuId}, MenuTarget: {e.ContextMenuTargetId}, IsCanceled: {e.IsCanceled}, MenuWardOverview: {e.MenuItemElement}, MouseEvent: {e.MouseEvent}");
    }

}
